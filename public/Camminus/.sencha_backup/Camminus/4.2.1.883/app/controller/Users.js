/*
 * File: app/controller/Users.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Camminus.controller.Users', {
    extend: 'Ext.app.Controller',

    requires: [
        'Camminus.util.MD5'
    ],

    models: [
        'User',
        'Role',
        'ContractType'
    ],
    stores: [
        'Users',
        'Roles'
    ],
    views: [
        'users.Form',
        'users.Grid',
        'MainPanel',
        'Login'
    ],

    refs: [
        {
            ref: 'userForm',
            selector: 'userform'
        },
        {
            ref: 'usersGrid',
            selector: 'usersgrid'
        },
        {
            ref: 'userPicture',
            selector: 'userform image'
        },
        {
            ref: 'mainView',
            selector: 'mainview'
        }
    ],

    onUsersGridpanelRender: function(component, eOpts) {
        this.getRolesStore().load();
        this.getUsersStore().load();

    },

    onUserDeleteButtonClick: function(button, e, eOpts) {
        var grid = this.getUsersGrid(),
            record = grid.getSelectionModel().getSelection(),
            store = grid.getStore();

        if (store.getCount() >= 2 && record[0]){

            Ext.Msg.show({

                title: translations.msg_title_delete,
                msg: translations.msg_delete,
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function (buttonId){

                    if (buttonId == 'yes'){
                        store.remove(record);
                    }
                }

            });

        }
            else if (store.getCount() == 1) {
                Ext.Msg.show({
                    title: translations.msg_title_warning,
                    msg: translations.msg_last_user,
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.WARNING
                });
            }
    },

    onUsersGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = this.getUserForm();

        if(!win){
            win = Ext.widget('userform');
        }


        if (record.get('profile_image')) {

            var img = win.down('image');
            img.setSrc('resources/profileImages/' + record.get('profile_image'));
        }

        win.setTitle(record.get('name'));
        win.down('form').loadRecord(record);
        win.show();
    },

    onUserLoginButtonClick: function(button, e, eOpts) {
        var win    = button.up('window'),
            form   = win.down('form').getForm(),
            values = form.getFieldValues(),
            view   = this.getMainView(),
            sb     = button.up();


        // Set the status bar to show that something is processing:
        sb.showBusy();

        if (form.isValid()) {

            values.password = Camminus.util.MD5.encode(values.password);

            Ext.Ajax.request({

                url: '/login/auth',
                method: 'POST',
                params: {
                    user_name: values.user_name,
                    password: values.password
                },

                success:function(response){

                    var retorno = Ext.JSON.decode(response.responseText);

                    if(retorno.success){

                        sb.setStatus({
                            text: translations.user_auth,
                            iconCls: 'x-status-valid',
                            clear: {
                                wait: 5000,
                                anim: false,
                                useDefaults: false
                            }
                        });

                        if(!view){
                            view = Ext.create('Camminus.view.MainView');

                        }


                        button.up('window').hide();
                    }else{
                        sb.setStatus({
                            text: translations.login_error,
                            iconCls: 'x-status-error',
                            clear: {
                                wait: 5000,
                                anim: false,
                                useDefaults: false
                            }
                        });
                    }

                },

                failure: function(response) {
                    Ext.Msg.show({
                        title:' Erro!',
                        msg: response.responseText,
                        icon: Ext.Msg.ERROR,
                        buttons: Ext.Msg.OK
                    });
                }

            });

        }else{

            sb.setStatus({
                text: translations.mandatory_fields,
                iconCls: 'x-status-error',
                clear: {
                    wait: 5000,
                    anim: false,
                    useDefaults: false
                }
            });

        }


    },

    onMainViewRender: function(component, eOpts) {
        var sessao = Ext.create('Ext.util.TaskRunner');

        var verificaSessao = sessao.newTask({
            run: function () {

                Ext.Ajax.request({
                    url: '/login',
                    success:function(response){

                        var retorno = Ext.JSON.decode(response.responseText);

                        if(!retorno.success){
                            Ext.MessageBox.alert('Atenção', 'Sua sessão expirou.', handleExpiration);

                        }

                    },

                    failure: function(response) {
                        Ext.Msg.show({
                            title:' Erro!',
                            msg: response.responseText,
                            icon: Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK
                        });

                    }

                });

            },

            interval: 900000

        });


        Ext.Ajax.request({
            url: '/login',
            success:function(response){

                var retorno = Ext.JSON.decode(response.responseText);

                UserData.setName(retorno.data.name);
                UserData.setId(retorno.data.id);


                //component.down('#userProfile').setTitle(UserData.getName());
                //component.down('#userProfile').setVisible(false);

                if(!retorno.success){
                    var redirect = "http://"+window.document.location.host;
                    window.location = redirect;
                }

            },

            failure: function(response) {
                Ext.Msg.show({
                    title:' Erro!',
                    msg: response.responseText,
                    icon: Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK
                });

            }


        });

        function handleExpiration(){

            var redirect = "http://"+window.document.location.host;
            window.location = redirect;

        }

        verificaSessao.start();
    },

    onUserButtonClick: function(button, e, eOpts) {
        var win    = button.up('window'),
            formPanel   = win.down('form'),
            record = formPanel.getRecord(),
            values = formPanel.getValues(),
            store  = this.getUsersStore();



        if (button.getText() === 'Salvar'){
            //console.dir(values);
            values.password = Camminus.util.MD5.encode(values.password);
            //store.add(values);

        }



        if (formPanel.getForm().isValid()) {

            formPanel.getForm().submit({
                clientValidation: true,
                url: '/users',
                success: function(form, action) {

                    var result = action.result;

                    console.log(result);

                    if (result.success) {
                        store.load();
                        win.close();

                    } else {
                       // Packt.util.Util.showErrorMsg(result.msg);
                    }
                },
                failure: function(form, action) {
                    switch (action.failureType) {
                        case Ext.form.action.Action.CLIENT_INVALID:
                            Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
                            break;
                        case Ext.form.action.Action.CONNECT_FAILURE:
                            Ext.Msg.alert('Failure', 'Ajax communication failed');
                            break;
                        case Ext.form.action.Action.SERVER_INVALID:
                            Ext.Msg.alert('Failure', action.result.msg);
                    }
                }
            });
        }



    },

    onAddNewUserClick: function(button, e, eOpts) {
        var win    = this.getUserForm(),
            record = Ext.create('Camminus.model.User');


        if(!win){
            win = Ext.widget('userform');
        }

        this.adding = true;

        win.down('form').loadRecord(record);

        win.show();
    },

    onUsersFormShow: function(component, eOpts) {
        console.log(this.adding);

        if (this.adding) {
            this.adding = undefined;

            component.setTitle('Criar novo usuário');

            component.down('#userButton').setText('Salvar');
            component.down('#password').setDisabled(false);
            component.down('#passwordcheck').setDisabled(false);
        }

    },

    onLogoutButtonClick: function(button, e, eOpts) {
        Ext.Ajax.request({
            url: '/login/logout',
            method: 'POST',
            success:function(response){

                if(response.responseText){
                    var redirect = "http://"+window.document.location.host;
                    window.location = redirect;
                }

            },

            failure: function(response) {
                Ext.Msg.show({
                    title:' Erro!',
                    msg: response.responseText,
                    icon: Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK
                });

            }

        });
    },

    onUserRefreshButtonClick: function(button, e, eOpts) {
        this.getUsersStore().load();
    },

    onUserEditButtonClick: function(button, e, eOpts) {
        var win = this.getUserForm(),
            grid = button.up('usersgrid'),
            record = grid.getSelectionModel().getSelection();


        if(!win){
            win = Ext.widget('userform');
        }

        if (record[0].get('profile_image')) {

            var img = win.down('image');
            img.setSrc('resources/profileImages/' + record[0].get('profile_image'));
        }

        win.setTitle(record[0].get('name'));
        win.down('form').loadRecord(record[0]);
        win.show();
    },

    onFilefieldChange: function(filefield, value, eOpts) {
        var file = filefield.fileInputEl.dom.files[0],
            picture = this.getUserPicture();


        if (typeof FileReader !== "undefined" && (/image/i).test(file.type)) {

            var reader = new FileReader();

            reader.onload = function(e){
                picture.setSrc(e.target.result);
            };

            reader.readAsDataURL(file);

        }
            else if (!(/image/i).test(file.type)){

                Ext.Msg.alert('Warning', 'You can only upload image files!');
                filefield.reset();

            }

    },

    init: function(application) {
        this.control({
            "usersgrid": {
                render: this.onUsersGridpanelRender,
                itemdblclick: this.onUsersGridpanelItemDblClick
            },
            "usersgrid button#delete": {
                click: this.onUserDeleteButtonClick
            },
            "login button#doLogin": {
                click: this.onUserLoginButtonClick
            },
            "mainview": {
                render: this.onMainViewRender
            },
            "userform button#userButton": {
                click: this.onUserButtonClick
            },
            "usersgrid button#new": {
                click: this.onAddNewUserClick
            },
            "userform": {
                show: this.onUsersFormShow
            },
            "headertoolbar button#logoutButton": {
                click: this.onLogoutButtonClick
            },
            "usersgrid button#refresh": {
                click: this.onUserRefreshButtonClick
            },
            "usersgrid button#edit": {
                click: this.onUserEditButtonClick
            },
            "#profileimage": {
                change: this.onFilefieldChange
            }
        });
    }

});
