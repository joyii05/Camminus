/*
 * File: app/controller/Services.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Camminus.controller.Services', {
    extend: 'Ext.app.Controller',

    models: [
        'Service'
    ],
    stores: [
        'Services'
    ],
    views: [
        'services.Grid',
        'services.Form'
    ],

    refs: [
        {
            ref: 'servicesGrid',
            selector: 'servicesgrid'
        },
        {
            ref: 'servicesForm',
            selector: 'servicesform'
        }
    ],

    onServicesGridpanelRender: function(component, eOpts) {
        this.getServicesStore().load();

    },

    onDeleteButtonClick: function(button, e, eOpts) {
        var grid = this.getRolesGrid(),
            record = grid.getSelectionModel().getSelection(),
            store = grid.getStore();


        if (record[0].data.name == "Admin"){
            Ext.Msg.show({
                title: translations.msg_title_warning,
                msg: "Não é possível apagar o grupo 'Admin'.",
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }


        // Ext.Msg.show({

        //     title: translations.msg_title_delete,
        //     msg: translations.msg_delete,
        //     buttons: Ext.Msg.YESNO,
        //     icon: Ext.Msg.QUESTION,
        //     fn: function (buttonId){
        //         console.log(buttonId);
        //         if (buttonId == 'yes'){
        //             store.remove(record);
        //             store.sync();
        //         }
        //     }

        // });



    },

    onAddNewService: function(button, e, eOpts) {
        var win    = this.getServicesForm();


        if(!win){
            win = Ext.widget('servicesform');
        }

        win.adding = true;

        win.show();
    },

    onServicesButtonClick: function(button, e, eOpts) {
        var win    = button.up('window'),
            formPanel   = win.down('form'),
            values = formPanel.getValues(),
            store  = this.getServicesStore(),
            grid   = this.getServicesGrid();




        if(formPanel.getForm().isValid()) {


            //Save
            if(button.text === 'Salvar'){
                store.add(values);

                if (grid){
                     grid.getSelectionModel().select(store.getNewRecords());
                }

            }
            //Update
            else{
                formPanel.updateRecord();
            }

            store.sync();

            win.close();


        }



    },

    onEditServicesButtonClick: function(button, e, eOpts) {
        var win = this.getServicesForm(),
            grid = button.up('servicesgrid'),
            record = grid.getSelectionModel().getSelection();


        if(!win){
            win = Ext.widget('servicesform');
        }


        win.setTitle(record[0].get('name'));
        win.down('form').loadRecord(record[0]);
        win.show();
    },

    onDeleteServiceButtonClick: function(button, e, eOpts) {
        var grid = this.getServicesGrid(),
            record = grid.getSelectionModel().getSelection(),
            store = grid.getStore();


        Ext.Msg.show({

            title: translations.msg_title_delete,
            msg: translations.msg_delete,
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function (buttonId){
                console.log(buttonId);
                if (buttonId == 'yes'){
                    store.remove(record);
                    store.sync();
                }
            }

        });



    },

    onRefreshServicesButtonClick: function(button, e, eOpts) {
        this.getServicesStore().load();
    },

    onServicesGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var win = this.getServicesForm();

        if(!win){
            win = Ext.widget('servicesform');
        }

        win.setTitle(record.get('name'));
        win.down('form').loadRecord(record);
        win.show();
    },

    onCasesServicesGridpanelRender: function(component, eOpts) {
        this.getServicesStore().load();
    },

    init: function(application) {
        this.control({
            "servicesgrid": {
                render: this.onServicesGridpanelRender,
                itemdblclick: this.onServicesGridpanelItemDblClick
            },
            "#deleteRole": {
                click: this.onDeleteButtonClick
            },
            "#addService": {
                click: this.onAddNewService
            },
            "#servicesButton": {
                click: this.onServicesButtonClick
            },
            "#editService": {
                click: this.onEditServicesButtonClick
            },
            "#deleteService": {
                click: this.onDeleteServiceButtonClick
            },
            "#refreshService": {
                click: this.onRefreshServicesButtonClick
            },
            "#casesServicesGrid": {
                render: this.onCasesServicesGridpanelRender
            }
        });
    }

});
