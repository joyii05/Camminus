/*
 * File: app/controller/Cases.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Camminus.controller.Cases', {
    extend: 'Ext.app.Controller',

    models: [
        'Case'
    ],
    stores: [
        'cases.Prioridade',
        'cases.Status',
        'Cases',
        'Costumers',
        'CostumersSearch',
        'cases.Services'
    ],
    views: [
        'cases.Form',
        'cases.Grid'
    ],

    refs: [
        {
            ref: 'costumersForm',
            selector: 'costumersform'
        },
        {
            ref: 'casesGrid',
            selector: 'casesgrid'
        },
        {
            ref: 'buscaCliente',
            selector: '#buscacliente'
        },
        {
            ref: 'casesForm',
            selector: 'casesform'
        }
    ],

    onCasesGridpanelRender: function(component, eOpts) {
        this.getCasesStore().load();

    },

    onAddCaseButtonClick: function(button, e, eOpts) {
        var win    = this.getCasesForm();


        if(!win){
            win = Ext.widget('casesform');
        }

        win.adding = true;

        win.show();
    },

    onCasesButtonClick: function(button, e, eOpts) {
        var win        = button.up('window'),
            formPanel  = win.down('form'),
            values     = formPanel.getValues(),
            store      = this.getCasesStore(),
            storeCS    = Ext.getStore('cases.Services'),
            grid       = this.getCasesGrid(),
            allRecords = storeCS.snapshot || storeCS.data,
            allItems   = allRecords.items,
            holder     = [];

        //Gets Services
        allItems.forEach(function(entry, index) {
            holder.push(entry.data.id);
        });

        // Adds Services Ids
        values.services = holder;


        // Saves
        if(formPanel.getForm().isValid()) {

            //Adds to the store
            if(button.text === 'Salvar'){
                store.add(values);
                if (grid){
                    grid.getSelectionModel().select(store.getNewRecords());
                }
            }

            // Syncs with backend
            store.sync({

                success: function(batch) {

                    var retorno = Ext.JSON.decode(batch.operations[0].response.responseText);

                    Camminus.util.Alert.msg('Sucesso', 'Ocorrência de número "' + retorno.data.case_number + '" criada com sucesso.');
                    storeCS.removeAll();
                    win.getLayout().setActiveItem(2);
                    win.center();
                    win.setTitle('Documentos');
                    win.case_id        = retorno.data.id;
                    win.case_number    = retorno.data.case_number;
                    win.costumer_name  = retorno.data.costumer.name;
                    win.costumer_id    = retorno.data.costumer.id;
                    win.fingerTemplate = retorno.data.costumer.fingerTemplate;
                    win.created_at     = retorno.data.created_at;

                },

                failure: function(batch){


                    var retorno = batch.operations[0].error.statusText;

                    if (retorno === undefined) retorno = batch.operations[0].error;

                    Camminus.util.Util.showErrorMsg(retorno);

                }
            });


        }


    },

    onRefreshButtonClick: function(button, e, eOpts) {
        this.getCasesStore().load();
    },

    onAddCasesCostumerButtonClick: function(button, e, eOpts) {
        var win    = this.getCostumersForm();


        if(!win){
            win = Ext.widget('costumersform');
        }

        win.adding = true;

        win.show();
    },

    onViaClienteEntradaBtnClick: function(button, e, eOpts) {
        var win = button.up('window');

        window.open("/reports/casesOpen/" + win.case_id);


    },

    onDigitalEntradaButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        if (win.fingerTemplate === '')
        {
            this.fingerEnroll(win.costumer_id);
        }
        else
        {
            this.fingerCheck(win.costumer_id);
        }




    },

    onGerarEtiquetasButtonClick: function(button, e, eOpts) {
        var etiqueta = {},
            win      = button.up('window'),
            dt       = new Date(win.created_at);

        etiqueta = {
            case_number: win.case_number,
            nome: win.costumer_name,
            data: Ext.Date.format(dt, "d/m/Y")
        };



        if ("WebSocket" in window)
        {
            var ws = new WebSocket("ws://192.168.56.101:11100");

            ws.onopen = function()
            {
                ws.send(JSON.stringify(etiqueta));
            };

            ws.onmessage = function (evt)
            {
                var received_msg = evt.data;

                if (received_msg == "true") Camminus.util.Alert.msg('Sucesso', 'Etiqueta enviada à impressora');
            };

            ws.onclose = function(evt){};

            ws.onerror = function (error) {
                alert('WebSocket Error ' + error);

            };
        }
        else
        {
            // The browser doesn't support WebSocket
            alert("WebSocket NOT supported by your Browser!");
        }
    },

    init: function(application) {
                this.getCostumersStore().on({
                    write: this.finishedLoading,
                    scope: this
                });

        this.control({
            "casesgrid": {
                render: this.onCasesGridpanelRender
            },
            "#addCase": {
                click: this.onAddCaseButtonClick
            },
            "#casesButton": {
                click: this.onCasesButtonClick
            },
            "#refreshCase": {
                click: this.onRefreshButtonClick
            },
            "#addCliente": {
                click: this.onAddCasesCostumerButtonClick
            },
            "#viaClienteEntradaBtn": {
                click: this.onViaClienteEntradaBtnClick
            },
            "#assDigitalEntrada": {
                click: this.onDigitalEntradaButtonClick
            },
            "#gerarEtiquetas": {
                click: this.onGerarEtiquetasButtonClick
            }
        });
    },

    finishedLoading: function(store, operation, eOpts) {
        var cliente = this.getBuscaCliente(),
            record  = operation.getRecords()[0],
            str     = this.getCostumersSearchStore();

        // str.load({
        //   params: {query: op}
        // });

        if (cliente){
          cliente.setValue(record);
        }

        console.log(record);

    },

    fingerEnroll: function(costumer_id) {
        if ("WebSocket" in window)
        {

            var ws       = new WebSocket("ws://192.168.56.101:11101"),
                i        = 0,
                formData = new FormData();


            ws.onopen = function()
            {
                ws.send("Enroll");
            };

            ws.onmessage = function (evt)
            {
                console.log(evt.data);
                if (evt.data !== 'false'){

                    if (i === 0)
                    {
                        formData.append('finger', evt.data, 'finger.fpt');
                        i = 1;
                    }
                    else
                    {
                        formData.append('img', evt.data, 'img.jpg');
                        formData.append('costumer_id', costumer_id);

                        var ajaxRequest = new XMLHttpRequest();

                        ajaxRequest.open('POST', '/fingerprints', true);

                        ajaxRequest.onreadystatechange = function() {
                            if (ajaxRequest.readyState == 4) {
                                if (ajaxRequest.responseText == "false"){
                                    Camminus.util.Alert.msg('Erro no servidor', 'Digital não cadastrada!');
                                }else{
                                    Camminus.util.Alert.msg('Sucesso', 'Digital cadastrada com sucesso.');
                                }
                            }
                        };

                        ajaxRequest.send(formData);

                    }
                }
                else{
                    Camminus.util.Alert.msg('Erro', 'Digital não cadastrada!');
                }

            };

            ws.onclose = function(){};

            ws.onerror = function (error) {
                alert('WebSocket Error ' + error);

            };

        }
        else
        {
            // The browser doesn't support WebSocket
            alert("WebSocket NOT supported by your Browser!");
        }
    },

    fingerCheck: function(costumer_id) {
        var ws = new WebSocket("ws://192.168.56.101:11102");

        ws.onopen = function()
        {

        };

        ws.onmessage = function (evt)
        {
            if (evt.data == "true")
            {
                Camminus.util.Alert.msg('Sucesso', 'Digital verificada com sucesso!');
            }
            else
            {
                Camminus.util.Alert.msg('Erro', 'Digital não reconhecida');
            }

        };

        ws.onclose = function(){};

        ws.onerror = function (error) {
            alert('WebSocket Error ' + error);
        };

        var request = new XMLHttpRequest();
        var params = 'costumer_id=' + costumer_id;

        request.open('GET', '/fingerprints/' + '?' + params , true);

        request.responseType = "arraybuffer";

        request.onload = function(oEvent) {

            if (request.status == 200){
                var blob = new Blob([request.response], {type: "application/octet-stream"});
                ws.send(blob);
            }else{
                Camminus.util.Alert.msg('Erro', 'Erro no servidor!');
            }
        };



        request.send();

    }

});
